# Generated by Django 4.0.6 on 2022-08-31 19:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line', models.CharField(choices=[('1', '1'), ('2', '2')], max_length=20)),
                ('published_date', models.DateField(auto_now=True)),
                ('year', models.IntegerField(max_length=4)),
                ('month', models.IntegerField(max_length=2)),
                ('day', models.IntegerField(max_length=2)),
                ('hour', models.IntegerField(max_length=2)),
                ('main_product', models.CharField(max_length=200)),
                ('quarry', models.CharField(choices=[('Mix', 'Mix'), ('Mixe', 'Mixo')], max_length=200)),
                ('kiln_feed_tonnage', models.IntegerField(validators=[django.core.validators.MinValueValidator(5, 'enter a number from 5 to 25'), django.core.validators.MaxValueValidator(25, 'enter a number from 5 to 25')])),
                ('gas_valve_sp', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'enter a number from 0 to 10'), django.core.validators.MaxValueValidator(10, 'enter a number from 0 to 10')])),
                ('kiln_inlet_temp', models.IntegerField(validators=[django.core.validators.MinValueValidator(400, 'enter a number from 400 to 900'), django.core.validators.MaxValueValidator(900, 'enter a number from 400 to 900')])),
                ('setpoint_temp', models.IntegerField(validators=[django.core.validators.MinValueValidator(100, 'enter a number form 100 to 150'), django.core.validators.MaxValueValidator(150, 'enter a number form 100 to 150')])),
                ('kiln_outlet_temp', models.IntegerField(validators=[django.core.validators.MinValueValidator(100, 'enter a number from 100 to 160'), django.core.validators.MaxValueValidator(160, 'enter a number from 100 to 160')])),
                ('filter_fan_frequency', models.IntegerField(validators=[django.core.validators.MinValueValidator(15, 'enter a number from 15 to 55'), django.core.validators.MinValueValidator(55, 'enter a number from 15 to 55')])),
                ('kiln_amper', models.IntegerField(validators=[django.core.validators.MinValueValidator(30, 'enter a number from 30 to 65'), django.core.validators.MaxValueValidator(65, 'enter a number from 30 to 65')])),
                ('kiln_negative_presure', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'enter a number from 0 to 0.7'), django.core.validators.MinValueValidator(0.7, 'enter a number from 0 to 0.7')])),
                ('stucco_temperature', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'enter a number from 0 to 160'), django.core.validators.MaxValueValidator(160, 'enter a number from 0 to 160')])),
                ('saparator_frequency', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'enter a number from 0 to 160'), django.core.validators.MaxValueValidator(160, 'enter a number from 0 to 160')])),
                ('moleculator_N_frequency', models.IntegerField(validators=[django.core.validators.MinValueValidator(20, 'enter a number from 20 to 50'), django.core.validators.MaxValueValidator(50, 'enter a number from 20 to 50')])),
                ('moleculator_S_frequency', models.IntegerField(validators=[django.core.validators.MinValueValidator(20, 'enter a number from 20 to 50'), django.core.validators.MaxValueValidator(50, 'enter a number from 20 to 50')])),
                ('gas_counter_digit', models.IntegerField()),
                ('energy_consumption', models.IntegerField()),
                ('silo800_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_knauf_1_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_knauf_2_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_block_1_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_block_2_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_emergency_1_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('silo_emergency_2_feed_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('work_without_output', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('stoppage', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'enter a number from 1 to 60'), django.core.validators.MaxValueValidator(60, 'enter a number from 1 to 60')])),
                ('stoppage_cause', models.CharField(choices=[('اتمام ورودی', 'اتمام ورودی'), ('خرابی مکانیکی', 'خرابی مکانیکی'), ('خرابی الکتریکی', 'خرابی الکتریکی')], max_length=200)),
                ('product_deviation_cause', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=500)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
